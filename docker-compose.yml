#version: '3.3'
#
#services:
#  web:
#    build: .
#    command: >
#      sh -c "gunicorn config.wsgi:application --bind 0.0.0.0:8000"
#    volumes:
#      - .:/usr/src/app/
#      - static_volume:/usr/src/app/static
#      - media_volume:/usr/src/app/media
#      - logs_volume:/usr/src/app/logs
#    expose:
#      - "8000"  # Используйте expose для проброса порта, который не нужно прослушивать извне
#    depends_on:
#      - db
#      - migration
#
#  db:
#    image: postgres
#    restart: always
#    environment:
#      POSTGRES_DB: airbaby_db
#      POSTGRES_USER: ubuntu
#      POSTGRES_PASSWORD: 1
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
#
#  migration:
#    build: .
#    command: >
#      sh -c "python manage.py makemigrations &&
#             python manage.py migrate"
#    volumes:
#      - .:/usr/src/app/
#    depends_on:
#      - db
#
#  redis:
#    image: redis
#
#  celery:
#    build: .
#    command: celery -A config worker -l INFO
#    volumes:
#      - .:/usr/src/app/
#    depends_on:
#      - web
#      - redis
#
#  nginx:
#    build:
#      context: .
#      dockerfile: nginx/Dockerfile
#    ports:
#      - "80:80"
#    volumes:
#      - static_volume:/usr/src/app/static
#      - media_volume:/usr/src/app/media
#      - logs_volume:/usr/src/app/logs  # Добавлено: также монтируем логи для Nginx
#    depends_on:
#      - web
#
#volumes:
#  postgres_data:
#  static_volume:
#  media_volume:
#  logs_volume:

version: '3.3'

services:
  web:
    build: .
    command: >
      sh -c "gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/usr/src/app/
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - logs_volume:/usr/src/app/logs

    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - migration

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: airbaby_db
      POSTGRES_USER: nikita
      POSTGRES_PASSWORD: 1
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  migration:
    build: .
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate"
    volumes:
      - .:/usr/src/app/
    depends_on:
      - db


  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"  # Добавлен порт для HTTPS
    volumes:
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - etc-letsencrypt:/etc/letsencrypt
    depends_on:
      - web
    networks:
      - default  # Добавлено для сетевого взаимодействия

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

networks:
  default:
    external:
      name: nginx-proxy  # Добавлено для сетевого взаимодействия

volumes:
  postgres_data:
  static_volume:
  media_volume:
  logs_volume:
  etc-letsencrypt:
    external: true